swagger: '2.0'
info:
  contact:
    email: office@veeplay.com
  description: >
    # Introduction

    The Veeplay Video API makes media transcoding and cross-device delivery easy
    for developers looking to integrate video into their apps.

    Simply provide a mezzanine input of your video, and Veeplay will create
    [HLS](https://docs.veeplay.com/docs/video-guides/video-streaming-formats-device-support#http-live-streaming-hls)
    and
    [DASH](https://docs.veeplay.com/docs/video-guides/video-streaming-formats-device-support#dynamic-adaptive-streaming-over-http-dash)
    renderings ready to play on any device, delivered via a global CDN.


    Read our [guide on video
    streaming](https://docs.veeplay.com/docs/video-guides/how-video-streaming-works)
    for a visually illustrated explanation of automating your video processing
    workflow with the Veeplay API.


    <div class="alert alert-info" role="alert">
      <i class="fa fa-info-circle"></i>
      All API calls in this document should be performed against our production endpoint: <strong><code>https://panel.veeplay.com/stream/</code></strong>
    </div>


    # Authentication

    To access the API, first sign up for an account at
    [panel.veeplay.com](https://panel.veeplay.com). A trial license will be
    automatically attached to your account, under the "Licenses" menu. Attach a
    new API application to your trial license by pressing the blue plus button,
    then selecting the API option. An API key will be automatically generated -
    use that to submit trial calls to the API.


    To use your API key, send it together with your request as the `X-Api-Key`
    header.


    ```bash

    curl --location --request POST 'https://panel.veeplay.com/stream/assets' \

    --header 'X-Api-Key: YOUR_API_KEY' \

    --header 'Content-Type: application/json' \

    --data-raw '{
        "input_url": "https://ia800209.us.archive.org/20/items/ElephantsDream/ed_hd.mp4",
        "normalize_audio": false,
        "metadata": {
            "title": "Elephant'\''s Dream"
        },
        "clip": {
            "end": "00:00:30:00"
        }
    }'

    ```



    <div class="alert alert-warning" role="alert">
      <i class="fa fa-exclamation-triangle"></i>
      Trial assets are clipped to the first 10 seconds of the original input video.
    </div>


    <div class="alert alert-info" role="alert">
      <i class="fa fa-info-circle"></i>
      <a class="alert-link" href="mailto:office@veeplay.com">Get in touch</a> with us to get a production license and API key.
    </div>


    # Rate Limits


    Getting a `403 Forbidden` response from the Veeplay API? That means you've
    exceeded the rate limits we enforce by default, and you should try again in
    a second.


    - The create asset endpoint is limited to one request per second.

    - Other endpoints are limited to five requests per second.


    <div class="alert alert-info" role="alert">
      <i class="fa fa-info-circle"></i>
      <a class="alert-link" href="mailto:office@veeplay.com">Get in touch</a> if your app needs more requests per second.
    </div>


    # Webhooks

    Use webhooks to have your application notified on events in the video asset
    and stream lifecycle. We will `POST` a request to an endpoint of your
    choice, allowing you to track live stream and asset ingestion status for
    every created video resource.


    To save the endpoint URL, go to your [Veeplay Admin
    Panel](https://panel.veeplay.com), under "License", then update and save the
    "Webhook" field under your streaming app, just below your API key.


    <div class="alert alert-info" role="alert">
      <i class="fa fa-info-circle"></i>
      To acknowledge the webhook, respond with a 2XX status to the request. Failed requests will be re-attempted five times before being dropped.
    </div>


    ## Sample webhook body


    ### For transcoding video assets:


    ```json

    {
      "event_name": "asset_updated",
      "status": "QUEUED",
      "asset_id": "90971b23-08c5-4185-8f8e-4ab79587431e"
    }

    ```


    **Structure**

    - `event_name`: one of `asset_created`, `asset_updated`, or
    `asset_destroyed`

    - `status`: one of `CREATED`, `QUEUED`, `SUBMITTED`, `PROGRESSING`,
    `COMPLETE`, `ERROR`

    - `asset_id`: the asset id of the referenced video asset


    <div class="alert alert-info" role="alert">
      <i class="fa fa-info-circle"></i>
      Asset details are not included in the webhook body. To retrieve complete asset details, use the <a href="#tag/Video-Assets/paths/~1assets~1{assetId}/get">get asset by id endpoint</a>.
    </div>


    <div class="alert alert-warning" role="alert">
      <i class="fa fa-exclamation-triangle"></i>
      For some statuses, expect to receive multiple `asset_updated` events.
    </div>


    ### For live streams:


    ```json

    {
      "event_name": "stream_updated",
      "status": "RUNNING",
      "stream_id": "90971b23-08c5-4185-8f8e-4ab79587431e"
    }

    ```


    **Structure**

    - `event_name`: one of `stream_created`, `stream_updated`, or
    `stream_destroyed`

    - `status`: one of `PENDING`, `PROVISIONING`, `PROVISIONED`, `RUNNING`,
    `STOPPED`, `ERROR`

    - `stream_id`: the id of the referenced live stream


    <div class="alert alert-info" role="alert">
      <i class="fa fa-info-circle"></i>
      Stream details are not included in the webhook body. To retrieve complete asset details, use the <a href="#tag/Live-Streams/paths/~1live~1{streamId}/get">get stream by id endpoint</a>.
    </div>
  license:
    name: Commercial
  title: Veeplay Video API Docs
  version: 1.0.0
  x-logo:
    altText: Veeplay Video API
    url: veeplay_logo.png
host: panel.veeplay.com
basePath: /stream
schemes:
  - https
paths:
  /assets:
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Array of all available assets
          schema:
            items:
              $ref: '#/definitions/Asset'
            type: array
      tags:
        - Video Assets
      description: |
        Lists all available assets. 
      operationId: listAssets
      summary: List assets
    post:
      consumes:
        - application/json
      parameters:
        - description: Asset to create
          in: body
          name: body
          schema:
            $ref: '#/definitions/AssetOrder'
      responses:
        '200':
          description: Asset created
        '400':
          description: Invalid input
      tags:
        - Video Assets
      description: |
        Ingest a new asset, transcode it and make it available for distribution.
      operationId: createAsset
      summary: Create a new asset
  '/assets/{assetId}':
    delete:
      produces:
        - application/json
      parameters:
        - description: Id of the asset to delete
          in: path
          name: assetId
          required: true
          type: string
      responses:
        '200':
          description: Asset removal confirmation
          schema:
            example:
              status: ok
            type: object
        '404':
          description: Asset not found
      tags:
        - Video Assets
      summary: Delete an asset by id
    get:
      produces:
        - application/json
      parameters:
        - description: Id of the asset to get
          in: path
          name: assetId
          required: true
          type: string
      responses:
        '200':
          description: The requested asset
          schema:
            $ref: '#/definitions/Asset'
        '404':
          description: Asset not found
      tags:
        - Video Assets
      summary: Get an asset by id
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Id of the asset to update
          in: path
          name: assetId
          required: true
          type: string
        - description: Asset details to update
          in: body
          name: body
          schema:
            $ref: '#/definitions/AssetUpdate'
      responses:
        '200':
          description: The updated asset
          schema:
            $ref: '#/definitions/Asset'
        '404':
          description: Asset not found
      tags:
        - Video Assets
      description: |
        The only updatable field for an asset is `metadata`.
      summary: Update an asset by id
  /live:
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Array of all available streams
          schema:
            items:
              $ref: '#/definitions/Livestream'
            type: array
      tags:
        - Live Streams
      description: |
        Lists all available livestreams. 
      operationId: listStreams
      summary: List streams
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Stream to create
          in: body
          name: body
          schema:
            $ref: '#/definitions/LivestreamOrder'
      responses:
        '200':
          description: The created stream
          schema:
            $ref: '#/definitions/Livestream'
        '400':
          description: Invalid input
      tags:
        - Live Streams
      description: >
        Create a new live stream, and set it to the `PENDING` state. Output URLs
        are allocated at this point, but no output is actually produced until
        the stream is started.
      operationId: createStream
      summary: Create a new live stream
  '/live/{streamId}':
    delete:
      produces:
        - application/json
      parameters:
        - description: Id of the stream to delete
          in: path
          name: streamId
          required: true
          type: string
      responses:
        '200':
          description: Stream removal confirmation
          schema:
            example:
              status: ok
            type: object
        '404':
          description: Stream not found
      tags:
        - Live Streams
      summary: Delete a stream by id
    get:
      produces:
        - application/json
      parameters:
        - description: Id of the stream to get
          in: path
          name: streamId
          required: true
          type: string
      responses:
        '200':
          description: The requested stream
          schema:
            $ref: '#/definitions/Livestream'
        '404':
          description: Stream not found
      tags:
        - Live Streams
      summary: Get a stream by id
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Id of the stream to update
          in: path
          name: streamId
          required: true
          type: string
        - description: Stream details to update
          in: body
          name: body
          schema:
            $ref: '#/definitions/LivestreamUpdate'
      responses:
        '200':
          description: The updated stream
          schema:
            $ref: '#/definitions/Livestream'
        '404':
          description: Stream not found
      tags:
        - Live Streams
      description: |
        The only updatable field for a stream is `metadata`.
      summary: Update a stream by id
  '/live/{streamId}/start':
    put:
      produces:
        - application/json
      parameters:
        - description: Id of the stream to start
          in: path
          name: streamId
          required: true
          type: string
      responses:
        '200':
          description: The stream has been successfully started
          schema:
            example:
              status: ok
            type: object
        '404':
          description: Stream not found
      tags:
        - Live Streams
      summary: Start a stream
  '/live/{streamId}/stop':
    put:
      produces:
        - application/json
      parameters:
        - description: Id of the stream to stop
          in: path
          name: streamId
          required: true
          type: string
      responses:
        '200':
          description: The stream has been successfully stopped
          schema:
            example:
              status: ok
            type: object
        '404':
          description: Stream not found
      tags:
        - Live Streams
      summary: Stop a stream
definitions:
  Asset:
    properties:
      asset_id:
        description: Use this to generate adaptive bitrate and MP4 links for playback.
        example: 71c404ad-7333-4527-a228-868e014fad41
        format: uuid
        type: string
      created_at:
        description: The datetime of asset creation.
        example: '2021-02-10T05:13:13.000Z'
        format: date-time
        type: string
      error:
        description: >-
          This field is populated with an error description in case the asset
          status equals `ERROR`.
        type: string
      metadata:
        description: >-
          An object that can be populated with any key-value data attached to
          the asset.
        example:
          title: Cool Movie
        type: object
      order:
        $ref: '#/definitions/AssetOrder'
      output:
        description: >-
          CDN URLs for transcoded outputs. This becomes available once the asset
          status is `COMPLETE`
        properties:
          dash:
            description: CDN URL for DASH rendition.
            type: string
          hls:
            description: CDN URL for HLS rendition.
            type: string
          mp4_high:
            description: CDN URL for the MP4 high quality rendition.
            type: string
          mp4_low:
            description: CDN URL for the MP4 low quality rendition.
            type: string
          mp4_medium:
            description: CDN URL for the MP4 medium quality rendition.
            type: string
        type: object
      status:
        description: The current asset ingestion and processing status.
        enum:
          - CREATED
          - QUEUED
          - SUBMITTED
          - PROGRESSING
          - COMPLETE
          - ERROR
        example: PROGRESSING
        type: string
      updated_at:
        description: The datetime of the asset's last update.
        example: '2021-02-10T05:13:13.000Z'
        format: date-time
        type: string
    required:
      - asset_id
      - created_at
      - order
      - status
      - updated_at
    type: object
  AssetOrder:
    description: The order options originally used to create the asset.
    properties:
      clip:
        $ref: '#/definitions/AssetOrder_clip'
      input_url:
        description: >-
          You must provide a URL to the master, high-res, high-quality version
          of the media to be ingested.
        example: 'https://ia800209.us.archive.org/20/items/ElephantsDream/ed_hd.mp4'
        type: string
      metadata:
        description: An object that can be populated with any key-value data.
        example:
          title: Cool Movie
        type: object
      normalize_audio:
        description: Normalize audio using the ITU-R BS.1770-1 algorithm.
        example: true
        type: boolean
      overlays:
        items:
          $ref: '#/definitions/AssetOrder_overlay'
        type: array
    required:
      - input_url
    type: object
  AssetOrder_clip:
    description: >
      An object that holds clipping timestamps, in case you want to crop a
      fragment of the input media.

      - provide a `start` and/or `stop` key with a string timestamp in the
      format "HH:MM:SS:FF"
    properties:
      end:
        example: '00:00:30:00'
        type: string
      start:
        example: '00:00:10:00'
        type: string
    type: object
  AssetOrder_overlay:
    properties:
      duration:
        default: 10000
        description: The overlay on-screen duration in miliseconds.
        example: 10000
        type: integer
      fade_in_duration:
        default: 0
        description: The overlay fade-in duration in miliseconds.
        example: 1000
        type: integer
      fade_out_duration:
        default: 0
        description: The overlay fade-out duration in miliseconds.
        example: 1000
        type: integer
      height:
        description: >-
          The desired image height. This is relative to the original video
          dimensions. Pass the absolute value as an integer, or a percentage of
          the video height as a string. If setting a height without a width, the
          width will be automatically calculated to conserve the original image
          aspect ratio. If both width and height are unspecified, the original
          image width and height will be used.
        example: 50
      horizontal_align:
        default: right
        description: The horizontal image alignment.
        enum:
          - left
          - center
          - right
        example: right
        type: string
      horizontal_margin:
        default: 0
        description: The horizontal margin size to be left empty when placing the overlay.
        example: 10
        type: integer
      opacity:
        default: 100
        description: 'The overlay opacity percentage, from 0 to 100.'
        example: 80
        type: integer
      start:
        default: '00:00:00:00'
        description: The overlay on-screen start time.
        example: '00:00:00:00'
        type: string
      url:
        description: The URL to a publically accessible PNG image.
        example: 'https://example.com/overlay_image.png'
        type: string
      vertical_align:
        default: bottom
        description: The vertical image alignment.
        enum:
          - top
          - center
          - bottom
        example: bottom
        type: string
      vertical_margin:
        default: 0
        description: The vertical margin size to be left empty when placing the overlay.
        example: 10
        type: integer
      width:
        description: >-
          The desired image width. This is relative to the original video
          dimensions. Pass the absolute value as an integer, or a percentage of
          the video width as a string. If setting a width without a height, the
          height will be automatically calculated to conserve the original image
          aspect ratio. If both width and height are unspecified, the original
          image width and height will be used.
        example: 20%
    type: object
  AssetUpdate:
    properties:
      metadata:
        example:
          title: Cool Movie
        type: object
    type: object
  Livestream:
    properties:
      created_at:
        description: >-
          The datetime of stream creation. Note that this is corresponds to when
          the stream was created, not when the stream was started. See the
          `started_at` property to learn when the stream went live.
        example: '2021-02-10T05:13:13.000Z'
        format: date-time
        type: string
      error:
        description: >-
          This field is populated with an error description in case the stream
          status equals `ERROR`.
        type: string
      idle_at:
        description: >-
          The datetime when the stream went idle (the input disconnected or
          became empty).
        example: '2021-02-10T05:13:13.000Z'
        format: date-time
        type: string
      input:
        description: >-
          Stream RTMP input configuration. Keep this data secret, and use it to
          configure your streaming software to connect to the Veeplay servers.
        properties:
          server_url:
            description: The Server URL.
            type: string
          stream_key:
            description: The Stream Key.
            type: string
        type: object
      max_idle_seconds:
        description: >-
          The maximum time a live stream can spend in an idle (disconnected from
          input) state, in seconds, before being permanently stopped. This
          applies to streams in the `RUNNING` state.
        type: integer
      max_live_seconds:
        description: >-
          The maximum duration of a live stream, in seconds. This applies to
          streams in the `RUNNING` state.
        type: integer
      metadata:
        description: >-
          An object that can be populated with any key-value data attached to
          the stream.
        example:
          title: Cool Movie
        type: object
      order:
        $ref: '#/definitions/LivestreamOrder'
      output:
        description: CDN URLs for live stream outputs.
        properties:
          live:
            description: CDN URL for the HLS live stream.
            type: string
          vod:
            description: >-
              CDN URL for the HLS recorded VOD version of the stream. This
              remains available after the event has ended.
            type: string
        type: object
      started_at:
        description: The datetime when the stream went live.
        example: '2021-02-10T05:13:13.000Z'
        format: date-time
        type: string
      status:
        description: The current livestream workflow status.
        enum:
          - PENDING
          - PROVISIONING
          - PROVISIONED
          - RUNNING
          - STOPPED
          - ERROR
        example: RUNNING
        type: string
      stopped_at:
        description: The datetime when the stream stopped.
        example: '2021-02-10T05:13:13.000Z'
        format: date-time
        type: string
      stream_id:
        description: Use this to generate live and VOD links for playback.
        example: 71c404ad-7333-4527-a228-868e014fad41
        format: uuid
        type: string
      updated_at:
        description: The datetime of the last update made to the stream.
        example: '2021-02-10T05:13:13.000Z'
        format: date-time
        type: string
    required:
      - stream_id
      - created_at
      - order
      - status
      - updated_at
    type: object
  LivestreamOrder:
    description: The order options originally used to create the live stream.
    properties:
      max_idle_seconds:
        description: >-
          The maximum time a live stream can spend in an idle (disconnected from
          input) state, in seconds, before being permanently stopped. This
          applies to streams in the `RUNNING` state. Defaults to 900 (15
          minutes).
        type: integer
      metadata:
        description: An object that can be populated with any key-value data.
        example:
          title: Cool Stream
        type: object
      simulcast:
        description: A list of RTMP credentials for restreaming to 3rd party services.
        items:
          properties:
            stream_key:
              description: Service stream key for RTMP input.
              example: acbde
              type: string
            url:
              description: Service URL for RTMP input.
              example: 'rtmp://a.rtmp.youtube.com/live2'
              type: string
          type: object
        type: array
    type: object
  LivestreamUpdate:
    properties:
      metadata:
        example:
          title: Cool Stream
        type: object
    type: object
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-Api-Key
    type: apiKey
security:
  - ApiKeyAuth: []
tags:
  - description: >
      Use these endpoints to control media ingestion and manipulate assets.


      An asset represents a media file input that has been ingested, processed
      and made ready for delivery by Veeplay.


      ## Supported Inputs

      The following video codecs are supported for input:

      - No container: DV/DVCPRO, AVC (H.264), HEVC (H.265), MPEG-1, MPEG-2

      - AVI: Uncompressed, Canopus HQ, DivX/Xvid, DV/DVCPRO

      - Flash: AVC (H.264), Flash 9 File, H.263

      - Matroska: AVC (H.264), PCM, MPEG-2, MPEG-4 part 2, VC-1

      - MPEG-PS

      - MPEG-TS: AVC (H.264), HEVC (H.265), MPEG-2, VC-1

      - MPEG-1, MPEG-2

      - MXF: Uncompressed, Apple ProRes (supported types), AVC Intra 50/100,
      VC-3, DV/DVCPRO, DV25, DV50, DVCPro HD, AVC (H.264), JPEG 2000 (J2K),
      MPEG-2, Panasonic P2, SonyXDCam, SonyXDCam MPEG-4 Proxy

      - QuickTime: Uncompressed, Apple ProRes (supported types), AVC Intra
      50/100, DivX/Xvid, DV/DVCPRO, H.261, H.262, H.263, AVC (H.264), HEVC
      (H.265), JPEG 2000 (J2K), MJPEG, MPEG-2, MPEG-4 part 2, QuickTime
      Animation (RLE)

      - WebM: VP8, VP9

      - WMV or ASF: VC-1


      The following audio codecs are supported for input:

      - PCM

      - AVI: Dolby Digital (AC3), Dolby Digital Plus (EAC3), Dolby E frames
      carried in PCM streams, MP3, MPEG Audio, PCM

      - Flash: AAC

      - IMF: PCM

      - Matroska: AAC, Dolby Digital (AC3), Dolby Digital Plus (EAC3), Opus,
      WMA, WMA2

      - MPEG-PS: MPEG audio

      - MPEG-TS: AAC, AIFF, Dolby Digital (AC3), Dolby Digital Plus (EAC3),
      Dolby E frames carried in PCM streams, MPEG Audio, PCM, WMA, WMA2

      - MPEG-1: AAC, AIFF, Dolby Digital (AC3), Dolby Digital Plus (EAC3), MPEG,
      Audio PCM

      - MP3

      - MPEG-4: AAC, Dolby Digital (AC3), Dolby Digital Plus (EAC3), PCM, WMA,
      WMA2

      - MXF: AAC, AIFF, Dolby E frames carried in PCM streams, MPEG Audio, PCM

      - QuickTime: AAC, MP3, PCM

      - WAV: PCM

      - WebM: Opus, Vorbis

      - WMV or ASF: WMA, WMA2


      <div class="alert alert-warning" role="alert">
        <i class="fa fa-exclamation-triangle"></i>
        Output encoding quality and variants are constrained by the quality and dimensions of the input you provide.
      </div>


      <div class="alert alert-warning" role="alert">
        <i class="fa fa-exclamation-triangle"></i>
        Your master input will not be saved to Veeplay storage. After ingestion, we will not need to access your master input again.
      </div>


      ## Smart Adaptive Output

      All assets ingested by the Veeplay API are made available to a wide range
      of devices for optimized playback. HLS and DASH playlists are generated
      for every ingested asset, enabling developers to support a plethora of
      devices and players with minimal effort.


      HLS is more widely supported than DASH, and is compatible with:

      - mobile iOS and Android devices

      - Linux, Microsoft and macOS devices

      - most web browsers, like Chrome, Safari, Firefox, and Edge

      - set-top boxes like Roku & smart TVs


      [See the HLS device compatibility matrix
      >](https://docs.veeplay.com/docs/video-guides/video-streaming-formats-device-support#http-live-streaming-hls)


      DASH is not supported by Safari, but is compatible with:

      - Android devices (native support, recommended)

      - LG, Samsung, Panasonic, Philips, and Sony TVs

      - Chromecast

      - web browsers, implemented via Media Source Extensions (MSEs) and
      Javascript


      [See the DASH device compatibility matrix
      >](https://docs.veeplay.com/docs/video-guides/video-streaming-formats-device-support#dynamic-adaptive-streaming-over-http-dash)


      All assets are encoded using CMAF with
      [H264](https://docs.veeplay.com/docs/video-guides/video-codec-types-device-support#h264-avc)
      video and AAC audio. CMAF is a modern, HTTP-based standard that simplifies
      the delivery of streaming media by using a common media format for video
      streams, reducing costs, complexity, and latency. This allows us to
      maximise support coverage while also keeping encoding and delivery costs
      low.


      [Read more about the CMAF format
      here](https://developer.apple.com/documentation/http_live_streaming/about_the_common_media_application_format_with_http_live_streaming).


      <div class="alert alert-info" role="alert">
        <i class="fa fa-info-circle"></i>
        The number of renditions in the playlists, as well as the resolution and the bitrate for each rendition, are not fixed, but determined automatically by Veeplay based on input characteristics.
      </div>


      Upon ingestion, Veeplay will analyze the input file and then automatically
      generate multiple video renditions with different bitrates and
      resolutions, in order to mazimize the video quality that the end viewer
      will see. For example, if the input is a fast-moving, visually complex
      asset, Veeplay might generate two 720p outputs with different bitrates
      that will feel very different quality-wise when viewed.


      <div class="alert alert-info" role="alert">
        <i class="fa fa-info-circle"></i>
        The rendition bitrate itself is variable and depends on video segment complexity. This allows us to further optimize asset size and delivery.
      </div>


      ## Download & Offline View

      All assets ingested by the Veeplay API are also converted into a series of
      static MP4 renditions. This is useful if you plan to support downloads or
      offline viewing, or if you need a simple, straightforward version that you
      can use, for example, for Open Graph tags.


      <div class="alert alert-info" role="alert">
        <i class="fa fa-info-circle"></i>
        By default, three MP4 renditions are generated: low, medium, and high quality. <a class="alert-link" href="mailto:office@veeplay.com">Get in touch</a> with us if you need more.
      </div>


      ## Audio Normalization

      Turn on audio normalization to bring audio loudness levels of your input
      to a standard target level during encoding. This is useful if your input
      audio loudness varies noticeably at different moments or between scenes.


      To turn on, set `audio_normalization: true` in the order object you
      provide to the asset create endpoint.


      <div class="alert alert-info" role="alert">
        <i class="fa fa-info-circle"></i>
        The algorithm used for audio normalization is <a href="https://www.itu.int/rec/R-REC-BS.1770" target="_blank">ITU-R BS.1770-1</a>, and the target loudness value is -24 LKFS.
      </div>


      ## Image Overlays

      When creating a new asset with the Veeplay Video API, you can provide a
      series of image URLs to overlay on top of your input video during the
      encoding process. Configuration options are available, including:

      - Specifying a start time and a duration;

      - Defining horizontal and vertical alignments and margins for the overlay;

      - Setting the overlay opacity, as well as fade-in and fade-out durations.


      To use this feature, populate the `overlays` array in the order object you
      provide to the asset create endpoint.


      <div class="alert alert-warning" role="alert">
        <i class="fa fa-exclamation-triangle"></i>
        You need to provide a publically accessible URL to a PNG image to use as the overlay.
      </div>


      ## Asset Structure

      Each asset has the following properties:
        - `asset_id` - use this to generate adaptive bitrate and MP4 links for playback.
        - `order` - the order options originally used to create the asset.
        - `status`, one of:
          - `CREATED`
          - `QUEUED`
          - `SUBMITTED`
          - `PROGRESSING`
          - `COMPLETE`
          - `ERROR`
        - `output`, a collection of transcoded rendition urls.
        - `error`, populated with an error description in case the asset status equals `ERROR`.
        - `metadata`, an object that can be populated with any key-value data attached to the asset.
        - `created_at`, the datetime of asset creation.
        - `updated_at`, the datetime of the asset's last update.
    name: Video Assets
  - description: >
      Use these endpoints to setup live streams.


      ## Live Stream Lifecycle


      A live stream begins in the `PENDING` state. This will allow you to grab
      output HLS URLs (for the live stream as well as for the recorded,
      video-on-demand version) and configure your video players. No charges are
      incurred at this stage.


      When ready to start broadcasting, you can move the stream to the `STARTED`
      state. At this point, you'll receive the input information (server URL and
      stream key) you need to point your local streaming software to Veeplay.


      <div class="alert alert-warning" role="alert">
        <i class="fa fa-exclamation-triangle"></i>
        Keep your input information safe, and treat it as you would a password. Anyone with access to input information will be able to broadcast video using your generated stream.
      </div>


      When ready to stop broadcasting, you can move the stream to the `STOPPED`
      state. The live stream will be stopped. Users should at this point be
      redirected to the recorded VOD version for viewing.


      <div class="alert alert-warning" role="alert">
        <i class="fa fa-exclamation-triangle"></i>
        A stopped stream cannot be restarted. If you need to continue streaming after you have stopped your stream, you'll need to create a new stream and update your players with the new URLs.
      </div>


      ## RTMP Input


      Every Veeplay live stream accepts a RTMP push input that supports
      connecting virtually every upstream broadcasting software of your choice,
      via a server URL and a stream key. A 1080p @ 30fps configuration for the
      input is recommended, but we support up to 4K @ 60 fps.


      Example stream input parameters:


      ```json

      {
        "stream_id": "e4d2d760-ff8b-4108-b696-a383dd328210",
        ...
        "input": {
          "server_url": "rtmp://54.81.122.10:1935/{APP-ID}",
          "stream_key": "e4d2d760-ff8b-4108-b696-a383dd328210"
        }
      }

      ```


      ## Live and VOD outputs


      Two adaptive bitrate HLS URLs will be generated for every Veeplay live
      stream: one for live distribution and one for VOD playback. Provide these
      URLs to your player to configure and embed the streams in your
      application.


      <div class="alert alert-info" role="alert">
        <i class="fa fa-info-circle"></i>
        The bitrate ladder for both outputs includes the following rendition resolutions: <strong>1080p, 720p, 480p, 360p, and 240p</strong>.
      </div>


      Example stream output:


      ```json

      {
        "stream_id": "e4d2d760-ff8b-4108-b696-a383dd328210",
        ...
        "output": {
            "live": "https://live.veeplay.com/{APP-ID}/e4d2d760-ff8b-4108-b696-a383dd328210/v.m3u8",
            "vod": "https://streaming.veeplay.com/{APP-ID}/r/e4d2d760-ff8b-4108-b696-a383dd328210/v.m3u8"
        }
      }

      ```


      ## Duration limits


      ### Disconnected input limit


      A started stream (currently in the `RUNNING` state) will be automatically
      stopped after 15 minutes of missing or broken input data.


      To override the default 15 minute limit if you anticipate longer input
      downtime, provide the `max_idle_duration` parameter when creating the
      stream.


      ### Maximum stream duration


      All streams will be automatically stopped by the system after 24 hours of
      being in the `RUNNING` state. [Contact us](mailto:office@veeplay.com) if
      you need to create live streams that last longer than 24 hours.


      <div class="alert alert-warning" role="alert">
        <i class="fa fa-exclamation-triangle"></i>
        <strong>If using the Trial License</strong>: trial livestreams are limited to 10 minutes of broadcast time, and 5 minutes of idle input time. Aquire a license to lift these limits on the livestreams you create.
      </div>


      ## Simulcast to 3rd party services


      With Simulcast enabled, you can send your live video stream simultaneously
      to multiple services that support RTMP or RTMPS input. Also known as
      restreaming, rebroadcasting, or live syndication.


      Services that are supported include:

      - Facebook Live

      - YouTube Live

      - Twitch

      - Vimeo

      - Periscope

      - Any with RTMP or RTMPS support


      <div class="alert alert-warning" role="alert">
        <i class="fa fa-exclamation-triangle"></i>
        <strong>Instagram</strong> is notably not supported as a Simulcast target, as you can only go live from the app.
      </div>


      To enable Simulcast, provide a list of credentials when creating a
      livestream:


      `POST https://panel.veeplay.com/streaming/live`


      ```json
        {
            "simulcast": [
              {
                "url": "rtmp://c.rtmp.youtube.com/live",
                "stream_key": "secretkey"
              },
              {
                "url": "rtmp://vie.contribute.live-video.net/app",
                "stream_key": "secretkey"
              }
            ]
        }
      ```
    name: Live Streams
x-components: {}

